---
import MainLayout from '../../layouts/MainLayout.astro';
---

<MainLayout 
  title="Simulador de Temporada de F√∫tbol" 
  description="Simula una temporada completa apostando. Descubre por qu√© incluso acertando el 70% de las apuestas puedes perder dinero."
>
  
  <!-- Hero Section -->
  <section class="bg-gradient-to-br from-red-600 via-orange-600 to-red-800 text-white py-12">
    <div class="container mx-auto px-4 text-center">
      <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl md:text-5xl font-bold mb-4">
          üèà Simulador de Temporada
        </h1>
        <p class="text-lg md:text-xl mb-6 text-red-100">
          Simula una temporada completa de f√∫tbol y descubre 
          <span class="text-yellow-300 font-semibold">por qu√© incluso acertando mucho, pierdes dinero</span>
        </p>
        <div class="bg-white/10 backdrop-blur-sm rounded-lg p-4 max-w-2xl mx-auto">
          <p class="text-red-100">
            üìä <strong>38 jornadas:</strong> Matem√°ticas reales vs ilusiones de ganancia
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Main Simulator -->
  <section class="py-12 bg-gray-50">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto">
        
        <!-- Configuration Panel -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">‚öôÔ∏è Configuraci√≥n del Apostador</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <!-- Win Rate -->
            <div>
              <label class="block text-gray-700 font-medium mb-2">% de Aciertos:</label>
              <select id="winRate" class="w-full px-3 py-2 border border-gray-300 rounded-lg">
                <option value="50">50% - Aleatorio</option>
                <option value="55">55% - Principiante</option>
                <option value="60">60% - Intermedio</option>
                <option value="65" selected>65% - Avanzado</option>
                <option value="70">70% - Experto</option>
                <option value="75">75% - Profesional</option>
                <option value="80">80% - Imposible</option>
              </select>\n              <p class="text-xs text-gray-500 mt-1">Incluso 65% es muy dif√≠cil de mantener</p>
            </div>

            <!-- Betting Strategy -->
            <div>
              <label class="block text-gray-700 font-medium mb-2">Estrategia:</label>
              <select id="strategy" class="w-full px-3 py-2 border border-gray-300 rounded-lg">
                <option value="fixed">Apuesta Fija</option>
                <option value="percentage" selected>% del Bankroll</option>
                <option value="kelly">Kelly Criterion</option>
              </select>
              <p class="text-xs text-gray-500 mt-1">Diferentes formas de gestionar el dinero</p>
            </div>

            <!-- Bet Amount -->
            <div>
              <label class="block text-gray-700 font-medium mb-2">Cantidad/Porcentaje:</label>
              <input id="betAmount" type="number" value="5" min="1" max="20" class="w-full px-3 py-2 border border-gray-300 rounded-lg">
              <p class="text-xs text-gray-500 mt-1" id="betAmountHelp">5% del bankroll por apuesta</p>
            </div>

            <!-- Initial Bankroll -->
            <div>
              <label class="block text-gray-700 font-medium mb-2">Bankroll Inicial:</label>
              <select id="bankroll" class="w-full px-3 py-2 border border-gray-300 rounded-lg">
                <option value="1000" selected>‚Ç¨1,000</option>
                <option value="2000">‚Ç¨2,000</option>
                <option value="5000">‚Ç¨5,000</option>
                <option value="10000">‚Ç¨10,000</option>
              </select>
              <p class="text-xs text-gray-500 mt-1">Tu dinero inicial para apostar</p>
            </div>
          </div>

          <!-- Control Buttons -->
          <div class="flex flex-col sm:flex-row gap-4 mt-6 justify-center">
            <button id="startSeasonBtn" class="bg-gradient-to-r from-green-600 to-green-800 hover:from-green-700 hover:to-green-900 text-white font-bold py-3 px-8 rounded-lg transition-all duration-200">
              üöÄ Empezar Temporada
            </button>
            <button id="fastSimulateBtn" class="bg-gradient-to-r from-blue-600 to-blue-800 hover:from-blue-700 hover:to-blue-900 text-white font-bold py-3 px-8 rounded-lg transition-all duration-200">
              ‚ö° Simulaci√≥n R√°pida
            </button>
            <button id="resetBtn" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-200">
              üîÑ Reset
            </button>
          </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          <!-- Season Progress -->
          <div class="lg:col-span-2">
            <!-- Current Match -->
            <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
              <h3 class="text-xl font-bold text-gray-900 mb-4">üèüÔ∏è Jornada en Curso</h3>
              
              <div class="mb-4">
                <div class="flex justify-between text-sm mb-2">
                  <span>Progreso de Temporada:</span>
                  <span id="seasonProgress">Jornada 0 de 38</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-3">
                  <div id="progressBar" class="bg-green-600 h-3 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
              </div>

              <!-- Current Matchday -->
              <div id="currentMatchday" class="space-y-3">
                <p class="text-center text-gray-500">Haz clic en \"Empezar Temporada\" para comenzar</p>
              </div>

              <!-- Season Controls -->
              <div class="mt-6 flex gap-3 justify-center">
                <button id="playMatchdayBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition-all duration-200 hidden">
                  ‚ñ∂Ô∏è Jugar Jornada
                </button>
                <button id="autoPlayBtn" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition-all duration-200 hidden">
                  ‚è© Auto Play
                </button>
              </div>
            </div>

            <!-- Bankroll Chart -->
            <div class="bg-white rounded-lg shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-4">üìà Evoluci√≥n del Bankroll</h3>
              <div class="h-64 relative">
                <canvas id="bankrollChart" class="w-full h-full"></canvas>
              </div>
            </div>
          </div>

          <!-- Statistics Panel -->
          <div class="space-y-6">
            
            <!-- Current Status -->
            <div class="bg-white rounded-lg shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-4">üí∞ Estado Actual</h3>
              <div class="space-y-3 text-sm">
                <div class="flex justify-between">
                  <span class="text-gray-600">Bankroll actual:</span>
                  <span id="currentBankroll" class="font-bold text-lg">‚Ç¨1,000</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Ganancia/P√©rdida:</span>
                  <span id="totalPnL" class="font-bold text-lg">‚Ç¨0</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">ROI:</span>
                  <span id="roi" class="font-bold">0%</span>
                </div>
                <div class="flex justify-between border-t pt-2">
                  <span class="text-gray-600">Pr√≥xima apuesta:</span>
                  <span id="nextBet" class="font-bold">‚Ç¨50</span>
                </div>
              </div>
            </div>

            <!-- Season Stats -->
            <div class="bg-white rounded-lg shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-4">üìä Estad√≠sticas</h3>
              <div class="space-y-2 text-sm">
                <div class="flex justify-between">
                  <span class="text-gray-600">Apuestas totales:</span>
                  <span id="totalBets" class="font-medium">0</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Aciertos:</span>
                  <span id="wins" class="font-medium text-green-600">0</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Fallos:</span>
                  <span id="losses" class="font-medium text-red-600">0</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">% Aciertos real:</span>
                  <span id="actualWinRate" class="font-medium">0%</span>
                </div>
                <div class="flex justify-between border-t pt-2">
                  <span class="text-gray-600">Total apostado:</span>
                  <span id="totalWagered" class="font-medium">‚Ç¨0</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Total devuelto:</span>
                  <span id="totalReturned" class="font-medium">‚Ç¨0</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">RTP real:</span>
                  <span id="actualRTP" class="font-medium">0%</span>
                </div>
              </div>
            </div>

            <!-- Performance Analysis -->
            <div class="bg-white rounded-lg shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-4">üéØ An√°lisis</h3>
              <div id="performanceAnalysis" class="space-y-3 text-sm">
                <p class="text-gray-500 text-center">Estad√≠sticas aparecer√°n aqu√≠ durante la simulaci√≥n</p>
              </div>
            </div>

            <!-- Reality Check -->
            <div class="bg-red-50 border border-red-200 rounded-lg p-4">
              <h4 class="font-bold text-red-800 mb-2">‚ö†Ô∏è Reality Check</h4>
              <div class="text-red-700 text-xs space-y-1" id="realityCheck">
                <p>‚Ä¢ Cuotas reales: 1.70-2.50 (parecen justas)</p>
                <p>‚Ä¢ Margen oculto: 5-8% en cada apuesta</p>
                <p>‚Ä¢ 60% aciertos + margen 6% = P√©rdidas lentas</p>
                <p>‚Ä¢ Como jugar ruleta: el 0 siempre gana</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Educational Content -->
  <section class="py-12 bg-white">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold text-center text-gray-900 mb-8">üß† Lo Que Este Simulador Te Ense√±a</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div class="bg-blue-50 border-l-4 border-blue-400 p-6 rounded">
            <h3 class="text-xl font-bold text-blue-800 mb-3">üìä Matem√°ticas Brutales</h3>
            <ul class="text-blue-700 space-y-2 text-sm">
              <li><strong>‚Ä¢ Cuotas realistas:</strong> Como los ejemplos reales (1.70, 2.50, etc.)</li>
              <li><strong>‚Ä¢ Margen oculto:</strong> 5-8% en cada apuesta (como el 0 de la ruleta)</li>
              <li><strong>‚Ä¢ Breakeven real:</strong> Necesitas 57-60% aciertos para compensar margen</li>
              <li><strong>‚Ä¢ ROI profesional:</strong> 2-5% anual con 65%+ aciertos consistentes</li>
              <li><strong>‚Ä¢ La trampa:</strong> El margen es invisible pero siempre est√° ah√≠</li>
            </ul>
          </div>
          
          <div class="bg-red-50 border-l-4 border-red-400 p-6 rounded">
            <h3 class="text-xl font-bold text-red-800 mb-3">üö® Trampas Comunes</h3>
            <ul class="text-red-700 space-y-2 text-sm">
              <li><strong>‚Ä¢ Overconfidence:</strong> \"Soy bueno prediciendo resultados\"</li>
              <li><strong>‚Ä¢ Cherry picking:</strong> Solo recuerdas tus aciertos</li>
              <li><strong>‚Ä¢ Gesti√≥n emocional:</strong> Subir apuestas tras p√©rdidas</li>
              <li><strong>‚Ä¢ Survival bias:</strong> Solo oyes historias de ganadores</li>
            </ul>
          </div>
        </div>

        <div class="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-6">
          <h3 class="text-xl font-bold text-yellow-800 mb-4 text-center">üéì Lecci√≥n Principal</h3>
          <p class="text-yellow-700 text-center text-lg">
            \"Incluso si fueras capaz de acertar el 65% de tus apuestas (algo extremadamente dif√≠cil), 
            el margen de la casa y la varianza har√≠an que tu ROI fuera m√≠nimo y el riesgo de ruina alto.\"
          </p>
          <p class="text-yellow-600 text-center text-sm mt-4">
            Los apostadores profesionales que ganan dinero son menos del 4% y requieren bankrolls enormes, 
            disciplina f√©rrea y dedicaci√≥n a tiempo completo.
          </p>
        </div>
      </div>
    </div>
  </section>

</MainLayout>

<script>
class SeasonSimulator {
  constructor() {
    this.config = {
      winRate: 65,
      strategy: 'percentage',
      betAmount: 5,
      initialBankroll: 1000
    };
    
    this.state = {
      currentBankroll: 1000,
      currentMatchday: 0,
      totalBets: 0,
      wins: 0,
      losses: 0,
      totalWagered: 0,
      totalReturned: 0,
      bankrollHistory: [1000],
      isPlaying: false,
      autoPlay: false
    };
    
    this.chart = null;
    this.teams = [
      'Real Madrid', 'Barcelona', 'Atl√©tico', 'Sevilla', 'Valencia', 'Betis',
      'Real Sociedad', 'Villarreal', 'Athletic', 'Getafe', 'Osasuna', 'Celta',
      'Mallorca', 'Girona', 'Las Palmas', 'Alav√©s', 'Rayo', 'C√°diz', 'Granada', 'Almer√≠a'
    ];
    
    this.initializeElements();
    this.attachEventListeners();
    this.updateConfigHelp();
    this.initChart();
  }

  initializeElements() {
    this.elements = {
      winRate: document.getElementById('winRate'),
      strategy: document.getElementById('strategy'),
      betAmount: document.getElementById('betAmount'),
      bankroll: document.getElementById('bankroll'),
      betAmountHelp: document.getElementById('betAmountHelp'),
      startSeasonBtn: document.getElementById('startSeasonBtn'),
      fastSimulateBtn: document.getElementById('fastSimulateBtn'),
      resetBtn: document.getElementById('resetBtn'),
      playMatchdayBtn: document.getElementById('playMatchdayBtn'),
      autoPlayBtn: document.getElementById('autoPlayBtn'),
      seasonProgress: document.getElementById('seasonProgress'),
      progressBar: document.getElementById('progressBar'),
      currentMatchday: document.getElementById('currentMatchday'),
      currentBankroll: document.getElementById('currentBankroll'),
      totalPnL: document.getElementById('totalPnL'),
      roi: document.getElementById('roi'),
      nextBet: document.getElementById('nextBet'),
      totalBets: document.getElementById('totalBets'),
      wins: document.getElementById('wins'),
      losses: document.getElementById('losses'),
      actualWinRate: document.getElementById('actualWinRate'),
      totalWagered: document.getElementById('totalWagered'),
      totalReturned: document.getElementById('totalReturned'),
      actualRTP: document.getElementById('actualRTP'),
      performanceAnalysis: document.getElementById('performanceAnalysis'),
      bankrollChart: document.getElementById('bankrollChart')
    };
  }

  attachEventListeners() {
    this.elements.winRate.addEventListener('change', (e) => {
      this.config.winRate = parseInt(e.target.value);
      this.updateConfigHelp();
    });
    
    this.elements.strategy.addEventListener('change', (e) => {
      this.config.strategy = e.target.value;
      this.updateConfigHelp();
    });
    
    this.elements.betAmount.addEventListener('input', (e) => {
      this.config.betAmount = parseFloat(e.target.value);
      this.updateConfigHelp();
    });
    
    this.elements.bankroll.addEventListener('change', (e) => {
      this.config.initialBankroll = parseInt(e.target.value);
      this.updateConfigHelp();
    });
    
    this.elements.startSeasonBtn.addEventListener('click', () => this.startSeason());
    this.elements.fastSimulateBtn.addEventListener('click', () => this.fastSimulate());
    this.elements.resetBtn.addEventListener('click', () => this.reset());
    this.elements.playMatchdayBtn.addEventListener('click', () => this.playMatchday());
    this.elements.autoPlayBtn.addEventListener('click', () => this.toggleAutoPlay());
  }

  updateConfigHelp() {
    const strategy = this.config.strategy;
    const amount = this.config.betAmount;
    
    let helpText = '';
    switch(strategy) {
      case 'fixed':
        helpText = `‚Ç¨${amount} por apuesta`;
        break;
      case 'percentage':
        helpText = `${amount}% del bankroll por apuesta`;
        break;
      case 'kelly':
        helpText = `Kelly Criterion (${amount}% max)`;
        break;
    }
    
    this.elements.betAmountHelp.textContent = helpText;
    this.updateNextBet();
  }

  updateNextBet() {
    const nextBet = this.calculateBetSize();
    this.elements.nextBet.textContent = `‚Ç¨${nextBet.toFixed(0)}`;
  }

  calculateBetSize() {
    const currentBankroll = this.state.currentBankroll;
    
    // Prevent exponential growth while allowing realistic betting
    let betSize;
    
    switch(this.config.strategy) {
      case 'fixed':
        betSize = Math.min(this.config.betAmount, currentBankroll);
        break;
      case 'percentage':
        // Standard percentage betting with reasonable cap
        const percentageBet = currentBankroll * (this.config.betAmount / 100);
        const maxBet = this.config.initialBankroll * 0.15; // Max 15% of initial bankroll
        betSize = Math.min(percentageBet, maxBet, currentBankroll);
        break;
      case 'kelly':
        // Kelly for sports betting with 5-8% house edge
        const averageHouseEdge = 0.065; // 6.5% average house edge
        const edge = (this.config.winRate / 100) - (0.5 + averageHouseEdge); // Break-even at ~57% with house edge
        const kellyFraction = Math.max(0, Math.min(edge * 1.5, this.config.betAmount / 100));
        const kellyBet = currentBankroll * kellyFraction;
        const maxKellyBet = this.config.initialBankroll * 0.08; // Conservative Kelly
        betSize = Math.min(kellyBet, maxKellyBet, currentBankroll);
        break;
      default:
        betSize = 10;
    }
    
    return Math.max(1, Math.min(betSize, currentBankroll));
  }

  generateMatchday() {
    // Generate 10 matches with 100% REALISTIC odds (like real betting sites)
    const matches = [];
    const usedTeams = new Set();
    
    for (let i = 0; i < 10; i++) {
      // REAL betting scenarios with REAL house edge (like casino's 0)
      const scenarios = [
        // Balanced match - REAL odds
        { homeOdds: 2.50, drawOdds: 3.20, awayOdds: 2.80, desc: "Partido equilibrado" },
        // Home favorite moderate - REAL odds
        { homeOdds: 1.70, drawOdds: 3.60, awayOdds: 5.00, desc: "Favorito moderado casa" },
        // Strong home favorite - REAL odds
        { homeOdds: 1.15, drawOdds: 7.50, awayOdds: 15.00, desc: "Favorito claro casa" },
        // Away favorite - REAL odds
        { homeOdds: 7.00, drawOdds: 4.50, awayOdds: 1.40, desc: "Favorito visitante" },
        // Balanced lower league - REAL odds
        { homeOdds: 2.20, drawOdds: 3.00, awayOdds: 3.10, desc: "Equipos parejos" },
        // Slight home favorite - REAL odds
        { homeOdds: 1.90, drawOdds: 3.40, awayOdds: 4.20, desc: "Ligero favorito casa" },
        // Strong away favorite - REAL odds
        { homeOdds: 6.50, drawOdds: 4.00, awayOdds: 1.50, desc: "Grande jugando fuera" },
        // Very balanced - REAL odds
        { homeOdds: 2.40, drawOdds: 3.10, awayOdds: 2.90, desc: "Muy equilibrado" },
        // Moderate away favorite - REAL odds
        { homeOdds: 3.80, drawOdds: 3.30, awayOdds: 2.00, desc: "Favorito moderado fuera" }
      ];
      
      const scenario = scenarios[Math.floor(Math.random() * scenarios.length)];
      
      // Ensure NO duplicate teams
      let homeTeam, awayTeam;
      let attempts = 0;
      do {
        homeTeam = this.teams[Math.floor(Math.random() * this.teams.length)];
        awayTeam = this.teams[Math.floor(Math.random() * this.teams.length)];
        attempts++;
        if (attempts > 50) break;
      } while (homeTeam === awayTeam && attempts <= 50);
      
      // Calculate TRUE probabilities from odds (removing house edge)
      const impliedHome = 1 / scenario.homeOdds;
      const impliedDraw = 1 / scenario.drawOdds;
      const impliedAway = 1 / scenario.awayOdds;
      const totalImplied = impliedHome + impliedDraw + impliedAway;
      
      // TRUE probabilities (fair odds without house edge)
      const trueHome = impliedHome / totalImplied;
      const trueDraw = impliedDraw / totalImplied;
      const trueAway = impliedAway / totalImplied;
      
      matches.push({
        id: i + 1,
        homeTeam: homeTeam,
        awayTeam: awayTeam,
        homeOdds: scenario.homeOdds,
        drawOdds: scenario.drawOdds, 
        awayOdds: scenario.awayOdds,
        description: scenario.desc,
        // House edge (like casino's 0)
        houseEdge: (totalImplied - 1) * 100,
        // True probabilities (fair odds)
        trueHomeWin: trueHome,
        trueDraw: trueDraw,
        trueAwayWin: trueAway
      });
    }
    
    return matches;
  }

  startSeason() {
    this.state.isPlaying = true;
    this.state.currentBankroll = this.config.initialBankroll;
    this.state.bankrollHistory = [this.config.initialBankroll];
    
    this.elements.startSeasonBtn.classList.add('hidden');
    this.elements.playMatchdayBtn.classList.remove('hidden');
    this.elements.autoPlayBtn.classList.remove('hidden');
    
    this.updateDisplay();
    this.generateAndDisplayMatchday();
  }

  generateAndDisplayMatchday() {
    if (this.state.currentMatchday >= 38) {
      this.endSeason();
      return;
    }
    
    this.state.currentMatchday++;
    const matches = this.generateMatchday();
    
    this.elements.seasonProgress.textContent = `Jornada ${this.state.currentMatchday} de 38`;
    this.elements.progressBar.style.width = `${(this.state.currentMatchday / 38) * 100}%`;
    
    // Display matches with HOUSE EDGE prominently shown (like casino's 0)
    this.elements.currentMatchday.innerHTML = `
      <div class="mb-4 text-center">
        <div class="bg-orange-50 border border-orange-200 rounded-lg p-3">
          <p class="text-orange-800 text-sm font-medium">üé∞ <strong>El "0 verde" de las apuestas deportivas</strong></p>
          <p class="text-orange-700 text-xs">Cada partido tiene margen oculto 5-8% que garantiza p√©rdidas a largo plazo</p>
        </div>
      </div>
      ${matches.map((match, index) => `
        <div class="bg-gray-50 rounded-lg p-4 border mb-2">
          <div class="flex justify-between items-center">
            <div class="text-sm">
              <span class="font-medium">${match.homeTeam}</span> vs <span class="font-medium">${match.awayTeam}</span>
              <div class="text-xs text-gray-500">${match.description}</div>
            </div>
            <div class="text-sm space-x-2">
              <span class="bg-blue-100 px-2 py-1 rounded text-blue-800">${match.homeOdds.toFixed(2)}</span>
              <span class="bg-gray-100 px-2 py-1 rounded text-gray-800">${match.drawOdds.toFixed(2)}</span>
              <span class="bg-red-100 px-2 py-1 rounded text-red-800">${match.awayOdds.toFixed(2)}</span>
            </div>
          </div>
          <div class="text-xs mt-2 text-center">
            <span class="bg-red-100 text-red-800 px-2 py-1 rounded font-medium">
              üéØ Margen Casa: ${this.calculateHouseEdge(match).toFixed(1)}% (como el 0 de la ruleta)
            </span>
          </div>
        </div>
      `).join('')}
    `;
    
    this.currentMatches = matches;
  }

  playMatchday() {
    if (!this.currentMatches || this.state.currentBankroll <= 0) return;
    
    // Select random matches to bet on (3-6 matches per matchday)
    const numBets = 3 + Math.floor(Math.random() * 4);
    const selectedMatches = this.currentMatches
      .sort(() => Math.random() - 0.5)
      .slice(0, numBets);
    
    selectedMatches.forEach(match => {
      this.placeBet(match);
    });
    
    this.updateDisplay();
    this.updateChart();
    
    // Auto-generate next matchday after a delay
    setTimeout(() => {
      if (this.state.isPlaying && this.state.currentMatchday < 38) {
        this.generateAndDisplayMatchday();
        
        if (this.state.autoPlay) {
          setTimeout(() => this.playMatchday(), 1000);
        }
      }
    }, this.state.autoPlay ? 500 : 2000);
  }

  calculateHouseEdge(match) {
    // Calculate house edge from odds
    const impliedHome = 1 / match.homeOdds;
    const impliedDraw = 1 / match.drawOdds;
    const impliedAway = 1 / match.awayOdds;
    const totalImplied = impliedHome + impliedDraw + impliedAway;
    
    return (totalImplied - 1) * 100; // House edge percentage
  }

  placeBet(match) {
    if (this.state.currentBankroll <= 0) return;
    
    const betSize = this.calculateBetSize();
    if (betSize <= 0) return;
    
    // Randomly choose what to bet on (home, draw, away)
    const betChoice = Math.random();
    let odds, trueProbability, betType;
    
    if (betChoice < 0.5) {
      // Bet on home win
      odds = match.homeOdds;
      trueProbability = match.trueHomeWin;
      betType = 'home';
    } else if (betChoice < 0.8) {
      // Bet on away win  
      odds = match.awayOdds;
      trueProbability = match.trueAwayWin;
      betType = 'away';
    } else {
      // Bet on draw
      odds = match.drawOdds;
      trueProbability = match.trueDraw;
      betType = 'draw';
    }
    
    // CRITICAL: Apply user skill to TRUE probabilities (not biased odds)
    const baseSkill = this.config.winRate / 100;
    
    // Add realistic variance: ¬±10% swing based on "luck" and psychological factors
    const variance = (Math.random() - 0.5) * 0.2; // ¬±10% variance
    const psychologicalFactor = this.state.currentBankroll < this.config.initialBankroll ? -0.05 : 0; // Worse when losing
    const actualSkill = Math.max(0.2, Math.min(0.9, baseSkill + variance + psychologicalFactor));
    
    // The HOUSE EDGE KILLER: Even with skill, you bet at unfair odds
    // Skill affects your prediction accuracy, but payouts are still rigged
    const skillAdjustedProbability = trueProbability + (actualSkill - 0.5) * 0.3;
    const finalProbability = Math.max(0.05, Math.min(0.95, skillAdjustedProbability));
    
    const wins = Math.random() < finalProbability;
    
    // Update stats
    this.state.currentBankroll -= betSize;
    this.state.totalBets++;
    this.state.totalWagered += betSize;
    
    if (wins) {
      const winnings = betSize * odds; // Payout at HOUSE EDGE ODDS
      this.state.currentBankroll += winnings;
      this.state.totalReturned += winnings;
      this.state.wins++;
    } else {
      this.state.losses++;
    }
    
    this.state.bankrollHistory.push(this.state.currentBankroll);
  }

  async fastSimulate() {
    this.startSeason();
    this.state.autoPlay = true;
    
    this.elements.fastSimulateBtn.disabled = true;
    this.elements.fastSimulateBtn.textContent = 'Simulando...';
    
    while (this.state.currentMatchday < 38 && this.state.currentBankroll > 0) {
      this.generateAndDisplayMatchday();
      this.playMatchday();
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    this.endSeason();
    this.elements.fastSimulateBtn.disabled = false;
    this.elements.fastSimulateBtn.textContent = '‚ö° Simulaci√≥n R√°pida';
  }

  toggleAutoPlay() {
    this.state.autoPlay = !this.state.autoPlay;
    
    if (this.state.autoPlay) {
      this.elements.autoPlayBtn.textContent = '‚è∏Ô∏è Pausar';
      this.elements.autoPlayBtn.classList.remove('bg-purple-600', 'hover:bg-purple-700');
      this.elements.autoPlayBtn.classList.add('bg-red-600', 'hover:bg-red-700');
      this.playMatchday();
    } else {
      this.elements.autoPlayBtn.textContent = '‚è© Auto Play';
      this.elements.autoPlayBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
      this.elements.autoPlayBtn.classList.add('bg-purple-600', 'hover:bg-purple-700');
    }
  }

  endSeason() {
    this.state.isPlaying = false;
    this.state.autoPlay = false;
    
    this.elements.playMatchdayBtn.classList.add('hidden');
    this.elements.autoPlayBtn.classList.add('hidden');
    
    // Show final analysis
    this.showFinalAnalysis();
  }

  showFinalAnalysis() {
    const roi = ((this.state.currentBankroll - this.config.initialBankroll) / this.config.initialBankroll) * 100;
    const actualWinRate = this.state.totalBets > 0 ? (this.state.wins / this.state.totalBets) * 100 : 0;
    
    let analysis = '';
    if (roi > 5) {
      analysis = 'üéâ Resultado excepcional. Pero recuerda: mantener esto es casi imposible.';
    } else if (roi > 0) {
      analysis = 'üòê Peque√±a ganancia. El margen de casa est√° erosionando tus beneficios.';
    } else if (roi > -10) {
      analysis = 'üòë P√©rdidas menores. El margen 6% funciona lentamente pero seguro.';
    } else if (roi > -30) {
      analysis = 'üòü P√©rdidas t√≠picas. El "0 verde" de las apuestas te est√° matando.';
    } else {
      analysis = 'üí∏ El margen de casa ha ganado. Como siempre.';
    }
    
    this.elements.performanceAnalysis.innerHTML = `
      <div class="space-y-2">
        <p class="font-bold text-center">${analysis}</p>
        <div class="text-xs space-y-1">
          <p>‚Ä¢ Target aciertos: ${this.config.winRate}% | Real: ${actualWinRate.toFixed(1)}%</p>
          <p>‚Ä¢ ROI profesional real: 2-5% anual | Tu ROI: ${roi.toFixed(1)}%</p>
          <p>‚Ä¢ Breakeven necesario: ~57% aciertos (con margen casa 6%)</p>
          <p>‚Ä¢ Margen casa promedio: 5-8% en cada apuesta</p>
          <p>‚Ä¢ RTP real: ${(this.state.totalReturned / this.state.totalWagered * 100).toFixed(1)}% (el margen te come)</p>
        </div>
      </div>
    `;
  }

  updateDisplay() {
    const pnl = this.state.currentBankroll - this.config.initialBankroll;
    const roi = (pnl / this.config.initialBankroll) * 100;
    const actualWinRate = this.state.totalBets > 0 ? (this.state.wins / this.state.totalBets) * 100 : 0;
    const actualRTP = this.state.totalWagered > 0 ? (this.state.totalReturned / this.state.totalWagered) * 100 : 0;
    
    this.elements.currentBankroll.textContent = `‚Ç¨${this.state.currentBankroll.toFixed(0)}`;
    this.elements.totalPnL.textContent = `‚Ç¨${pnl.toFixed(0)}`;
    this.elements.totalPnL.className = `font-bold text-lg ${pnl >= 0 ? 'text-green-600' : 'text-red-600'}`;
    
    this.elements.roi.textContent = `${roi.toFixed(1)}%`;
    this.elements.roi.className = `font-bold ${roi >= 0 ? 'text-green-600' : 'text-red-600'}`;
    
    this.elements.totalBets.textContent = this.state.totalBets;
    this.elements.wins.textContent = this.state.wins;
    this.elements.losses.textContent = this.state.losses;
    this.elements.actualWinRate.textContent = `${actualWinRate.toFixed(1)}%`;
    this.elements.totalWagered.textContent = `‚Ç¨${this.state.totalWagered.toFixed(0)}`;
    this.elements.totalReturned.textContent = `‚Ç¨${this.state.totalReturned.toFixed(0)}`;
    this.elements.actualRTP.textContent = `${actualRTP.toFixed(1)}%`;
    
    this.updateNextBet();
  }

  initChart() {
    const ctx = this.elements.bankrollChart.getContext('2d');
    this.chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: [0],
        datasets: [{
          label: 'Bankroll',
          data: [this.config.initialBankroll],
          borderColor: 'rgb(59, 130, 246)',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          tension: 0.1,
          fill: true
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Bankroll (‚Ç¨)'
            }
          },
          x: {
            title: {
              display: true,
              text: 'Apuestas'
            }
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
  }

  updateChart() {
    if (!this.chart) return;
    
    const labels = this.state.bankrollHistory.map((_, index) => index);
    
    this.chart.data.labels = labels;
    this.chart.data.datasets[0].data = this.state.bankrollHistory;
    
    // Color the line based on performance
    const currentValue = this.state.bankrollHistory[this.state.bankrollHistory.length - 1];
    const isProfit = currentValue >= this.config.initialBankroll;
    
    this.chart.data.datasets[0].borderColor = isProfit ? 'rgb(34, 197, 94)' : 'rgb(239, 68, 68)';
    this.chart.data.datasets[0].backgroundColor = isProfit ? 'rgba(34, 197, 94, 0.1)' : 'rgba(239, 68, 68, 0.1)';
    
    this.chart.update();
  }

  reset() {
    this.state = {
      currentBankroll: this.config.initialBankroll,
      currentMatchday: 0,
      totalBets: 0,
      wins: 0,
      losses: 0,
      totalWagered: 0,
      totalReturned: 0,
      bankrollHistory: [this.config.initialBankroll],
      isPlaying: false,
      autoPlay: false
    };
    
    this.elements.startSeasonBtn.classList.remove('hidden');
    this.elements.playMatchdayBtn.classList.add('hidden');
    this.elements.autoPlayBtn.classList.add('hidden');
    
    this.elements.seasonProgress.textContent = 'Jornada 0 de 38';
    this.elements.progressBar.style.width = '0%';
    this.elements.currentMatchday.innerHTML = '<p class="text-center text-gray-500">Haz clic en "Empezar Temporada" para comenzar</p>';
    
    this.elements.performanceAnalysis.innerHTML = '<p class="text-gray-500 text-center">Estad√≠sticas aparecer√°n aqu√≠ durante la simulaci√≥n</p>';
    
    this.updateDisplay();
    this.initChart();
  }
}

// Load Chart.js and initialize simulator
document.addEventListener('DOMContentLoaded', () => {
  // Load Chart.js
  const script = document.createElement('script');
  script.src = 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js';
  script.onload = () => {
    new SeasonSimulator();
  };
  document.head.appendChild(script);
});
</script>
